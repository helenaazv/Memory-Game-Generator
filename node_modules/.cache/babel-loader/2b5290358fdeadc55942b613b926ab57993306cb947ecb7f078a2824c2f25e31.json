{"ast":null,"code":"var _jsxFileName = \"/Users/ligiahelena/Desktop/memory-game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport confetti from 'canvas-confetti';\nimport './App.css';\nimport Card from './components/Card';\nimport StatsBar from './components/StatsBar';\nimport GameOverScreen from './components/GameOverScreen';\nimport SearchBar from './components/SearchBar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [flipCount, setFlipCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [bestTime, setBestTime] = useState(() => {\n    const stored = localStorage.getItem('bestTime');\n    return stored ? parseInt(stored) : null;\n  });\n  const [showGameOverScreen, setShowGameOverScreen] = useState(false);\n  const UNSPLASH_ACCESS_KEY = 'eMQx1uzxyUWvXl2l8Gj9DlKWe6SNN5KsC8cQ2srcvkc'; // Replace with your key\n\n  // ------------------ Game Timer ------------------\n  useEffect(() => {\n    let interval;\n    if (startTime) {\n      interval = setInterval(() => {\n        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [startTime]);\n\n  // ------------------ Game Over Handling ------------------\n  useEffect(() => {\n    if (matched.length === cards.length / 2 && cards.length > 0) {\n      confetti({\n        particleCount: 150,\n        spread: 80,\n        origin: {\n          y: 0.6\n        }\n      });\n      setStartTime(null);\n      if (bestTime === null || elapsedTime < bestTime) {\n        setBestTime(elapsedTime);\n        localStorage.setItem('bestTime', elapsedTime.toString());\n      }\n      const timeout = setTimeout(() => setShowGameOverScreen(true), 2000);\n      return () => clearTimeout(timeout);\n    }\n  }, [matched, cards, elapsedTime, bestTime]);\n\n  // ------------------ Helper Functions ------------------\n  const initializeGame = (newCards = []) => {\n    setCards(newCards);\n    setFlipped([]);\n    setMatched([]);\n    setElapsedTime(0);\n    setFlipCount(0);\n    setStartTime(newCards.length ? Date.now() : null);\n    setGameStarted(newCards.length > 0);\n    setShowGameOverScreen(false);\n    setQuery('');\n  };\n  const resetFlipped = delay => {\n    setTimeout(() => {\n      setFlipped([]);\n      setDisabled(false);\n    }, delay);\n  };\n\n  // ------------------ Fetch Images ------------------\n  const fetchImages = async () => {\n    if (!query) return;\n    setLoading(true);\n    try {\n      const res = await fetch(`https://api.unsplash.com/search/photos?query=${query}&per_page=10&client_id=${UNSPLASH_ACCESS_KEY}`);\n      const data = await res.json();\n      const images = data.results.map(img => ({\n        id: uuidv4(),\n        src: img.urls.small\n      }));\n      const duplicated = images.flatMap(img => [{\n        ...img,\n        uniqueId: uuidv4()\n      }, {\n        ...img,\n        uniqueId: uuidv4()\n      }]);\n      const shuffled = duplicated.sort(() => Math.random() - 0.5);\n      initializeGame(shuffled);\n    } catch (err) {\n      console.error('Error fetching images:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ------------------ Card Click ------------------\n  const handleClick = card => {\n    if (disabled || flipped.find(f => f.uniqueId === card.uniqueId) || matched.includes(card.src)) return;\n    const newFlipped = [...flipped, card];\n    setFlipped(newFlipped);\n    if (newFlipped.length === 2) {\n      setDisabled(true);\n      setFlipCount(prev => prev + 1);\n      if (newFlipped[0].src === newFlipped[1].src) {\n        setMatched([...matched, card.src]);\n        resetFlipped(700);\n      } else {\n        resetFlipped(1000);\n      }\n    }\n  };\n  const resetGame = () => initializeGame([]);\n\n  // ------------------ Render ------------------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), !gameStarted && !showGameOverScreen && /*#__PURE__*/_jsxDEV(SearchBar, {\n      query: query,\n      setQuery: setQuery,\n      fetchImages: fetchImages,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), showGameOverScreen ? /*#__PURE__*/_jsxDEV(GameOverScreen, {\n      elapsedTime: elapsedTime,\n      flipCount: flipCount,\n      bestTime: bestTime,\n      resetGame: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [cards.length > 0 && /*#__PURE__*/_jsxDEV(StatsBar, {\n        matched: matched,\n        flipCount: flipCount,\n        elapsedTime: elapsedTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: cards.map(card => {\n          const isFlipped = flipped.find(f => f.uniqueId === card.uniqueId) || matched.includes(card.src);\n          return /*#__PURE__*/_jsxDEV(Card, {\n            card: card,\n            handleClick: handleClick,\n            isFlipped: isFlipped\n          }, card.uniqueId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VoiinhjJ+tVvHD+wA+NHBIwbr0E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","v4","uuidv4","confetti","Card","StatsBar","GameOverScreen","SearchBar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","query","setQuery","cards","setCards","flipped","setFlipped","matched","setMatched","disabled","setDisabled","startTime","setStartTime","elapsedTime","setElapsedTime","flipCount","setFlipCount","loading","setLoading","gameStarted","setGameStarted","bestTime","setBestTime","stored","localStorage","getItem","parseInt","showGameOverScreen","setShowGameOverScreen","UNSPLASH_ACCESS_KEY","interval","setInterval","Math","floor","Date","now","clearInterval","length","particleCount","spread","origin","y","setItem","toString","timeout","setTimeout","clearTimeout","initializeGame","newCards","resetFlipped","delay","fetchImages","res","fetch","data","json","images","results","map","img","id","src","urls","small","duplicated","flatMap","uniqueId","shuffled","sort","random","err","console","error","handleClick","card","find","f","includes","newFlipped","prev","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isFlipped","_c","$RefreshReg$"],"sources":["/Users/ligiahelena/Desktop/memory-game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport confetti from 'canvas-confetti';\nimport './App.css';\n\nimport Card from './components/Card';\nimport StatsBar from './components/StatsBar';\nimport GameOverScreen from './components/GameOverScreen';\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [flipCount, setFlipCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [bestTime, setBestTime] = useState(() => {\n    const stored = localStorage.getItem('bestTime');\n    return stored ? parseInt(stored) : null;\n  });\n  const [showGameOverScreen, setShowGameOverScreen] = useState(false);\n\n  const UNSPLASH_ACCESS_KEY = 'eMQx1uzxyUWvXl2l8Gj9DlKWe6SNN5KsC8cQ2srcvkc'; // Replace with your key\n\n  // ------------------ Game Timer ------------------\n  useEffect(() => {\n    let interval;\n    if (startTime) {\n      interval = setInterval(() => {\n        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [startTime]);\n\n  // ------------------ Game Over Handling ------------------\n  useEffect(() => {\n    if (matched.length === cards.length / 2 && cards.length > 0) {\n      confetti({ particleCount: 150, spread: 80, origin: { y: 0.6 } });\n      setStartTime(null);\n\n      if (bestTime === null || elapsedTime < bestTime) {\n        setBestTime(elapsedTime);\n        localStorage.setItem('bestTime', elapsedTime.toString());\n      }\n\n      const timeout = setTimeout(() => setShowGameOverScreen(true), 2000);\n      return () => clearTimeout(timeout);\n    }\n  }, [matched, cards, elapsedTime, bestTime]);\n\n  // ------------------ Helper Functions ------------------\n  const initializeGame = (newCards = []) => {\n    setCards(newCards);\n    setFlipped([]);\n    setMatched([]);\n    setElapsedTime(0);\n    setFlipCount(0);\n    setStartTime(newCards.length ? Date.now() : null);\n    setGameStarted(newCards.length > 0);\n    setShowGameOverScreen(false);\n    setQuery('');\n  };\n\n  const resetFlipped = (delay) => {\n    setTimeout(() => {\n      setFlipped([]);\n      setDisabled(false);\n    }, delay);\n  };\n\n  // ------------------ Fetch Images ------------------\n  const fetchImages = async () => {\n    if (!query) return;\n    setLoading(true);\n    try {\n      const res = await fetch(\n        `https://api.unsplash.com/search/photos?query=${query}&per_page=10&client_id=${UNSPLASH_ACCESS_KEY}`\n      );\n      const data = await res.json();\n      const images = data.results.map((img) => ({ id: uuidv4(), src: img.urls.small }));\n\n      const duplicated = images.flatMap((img) => [\n        { ...img, uniqueId: uuidv4() },\n        { ...img, uniqueId: uuidv4() },\n      ]);\n      const shuffled = duplicated.sort(() => Math.random() - 0.5);\n\n      initializeGame(shuffled);\n    } catch (err) {\n      console.error('Error fetching images:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ------------------ Card Click ------------------\n  const handleClick = (card) => {\n    if (disabled || flipped.find((f) => f.uniqueId === card.uniqueId) || matched.includes(card.src))\n      return;\n\n    const newFlipped = [...flipped, card];\n    setFlipped(newFlipped);\n\n    if (newFlipped.length === 2) {\n      setDisabled(true);\n      setFlipCount((prev) => prev + 1);\n\n      if (newFlipped[0].src === newFlipped[1].src) {\n        setMatched([...matched, card.src]);\n        resetFlipped(700);\n      } else {\n        resetFlipped(1000);\n      }\n    }\n  };\n\n  const resetGame = () => initializeGame([]);\n\n  // ------------------ Render ------------------\n  return (\n    <div className=\"app\">\n      <h1>Memory Game Generator</h1>\n\n      {!gameStarted && !showGameOverScreen && (\n        <SearchBar query={query} setQuery={setQuery} fetchImages={fetchImages} loading={loading} />\n      )}\n\n      {showGameOverScreen ? (\n        <GameOverScreen\n          elapsedTime={elapsedTime}\n          flipCount={flipCount}\n          bestTime={bestTime}\n          resetGame={resetGame}\n        />\n      ) : (\n        <>\n          {cards.length > 0 && <StatsBar matched={matched} flipCount={flipCount} elapsedTime={elapsedTime} />}\n\n          <div className=\"grid\">\n            {cards.map((card) => {\n              const isFlipped = flipped.find((f) => f.uniqueId === card.uniqueId) || matched.includes(card.src);\n              return <Card key={card.uniqueId} card={card} handleClick={handleClick} isFlipped={isFlipped} />;\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}